import os

configfile: "config.yaml"

data_dir = '../rawData/layered'
sample_fns = []
for file in os.listdir(data_dir):
    if file.endswith(".tsv"):
        sample_fns.append(file)
sample_pfxes = list(map(lambda p: p[:p.rfind('.')], sample_fns))

rule all:
    resources: 
        tmpdir="/scratch/tmp"
    input:
        expand("cache/GO/fdr-{fdr}/layeredNetwork/block_summary.csv", 
               fdr = config["fdr"])

rule graph:
    threads: 1
    resources: 
        tmpdir="/scratch/tmp"
    input:
       data_dir
    params:
        type = config["type"]
    output:
        "cache/graph/layeredNetwork.xml.gz"
    script:
        "scripts/make_stacked_network.py"
 
rule trim:
    threads: 1
    resources: 
        tmpdir="/scratch/tmp"
    input:
        "cache/graph/layeredNetwork.xml.gz"
    output:
        "cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz" 
    params:
        fdr = config["fdr"],
        type = config["type"]
    log: 
        "logs/trim/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/trim_networks.py"

rule minSBM:
    threads: 8
    resources: 
        tmpdir="/scratch/tmp"
    params:
        type = config["type"]
    input:
        "cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz" 
    output:
        "cache/initialBlock/fdr-{fdr}/layeredNetwork.dill" 
    log: 
        "logs/intialBlock/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/make_SBM.py"

rule annealing: 
    threads: 8
    resources: 
        tmpdir="/scratch/tmp"
    params:
        type = config["type"]
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz",
        blocks="cache/initialBlock/fdr-{fdr}/layeredNetwork.dill"
    output:
        blocks="cache/annealedBlock/fdr-{fdr}/layeredNetwork.dill" 
    log: 
        "logs/annealedBlock/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/annealing_SBM.py"

rule equilibrate:
    threads: 8
    resources: 
        tmpdir="/scratch/tmp"
    params:
        type = config["type"],
        wait = 100
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz",
        blocks="cache/annealedBlock/fdr-{fdr}/layeredNetwork.dill"
    output:
        blocks="cache/equilibrate/fdr-{fdr}/layeredNetwork.dill"
    log: 
        "logs/equilibrate/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/equilibrateMCMC_SBM.py"

rule MCMC:
    threads: 16
    resources: 
        tmpdir="/scratch/tmp"
    params:
        type = config["type"],
        niter = 1000
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz",
        blocks="cache/equilibrate/fdr-{fdr}/layeredNetwork.dill"
    output:
        blocks="cache/MCMC/blocks/fdr-{fdr}/layeredNetwork.dill",
        hist="cache/MCMC/hist/fdr-{fdr}/layeredNetwork.dill"
    log: 
        "logs/MCMC/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/MCMC_SBM.py"

rule exportBlocks:
    threads: 16
    resources: 
        tmpdir="/scratch/tmp"
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/layeredNetwork.xml.gz",
        blocks="cache/MCMC/blocks/fdr-{fdr}/layeredNetwork.dill"
    output:
        blockSummary="cache/blockSummary/fdr-{fdr}/layeredNetwork/block_summary.csv",
        blockDF="cache/blockSummary/fdr-{fdr}/layeredNetwork/gene_block.csv"
    params:
        type = config["type"],
        blockDir = "cache/blockSummary/fdr-{fdr}/layeredNetwork"
    log: 
        "logs/exportBlocks/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/exportBlocks.py"

rule GO:
    threads: 1
    resources: 
        tmpdir="/scratch/tmp"
    input:
        blockSummary="cache/blockSummary/fdr-{fdr}/layeredNetwork/block_summary.csv",
        blockDF="cache/blockSummary/fdr-{fdr}/layeredNetwork/gene_block.csv"
    output:
        GO="cache/GO/fdr-{fdr}/layeredNetwork/GO.rds",
        GOcsv="cache/GO/fdr-{fdr}/layeredNetwork/GO.csv",
        blockSummary="cache/GO/fdr-{fdr}/layeredNetwork/block_summary.csv"
    params:
        blockDir = "cache/blockSummary/fdr-{fdr}/layeredNetwork",
        orgdb = "org.Hs.eg.db"
    log: 
        log="logs/GO/fdr-{fdr}/layeredNetwork.log"
    script:
        "scripts/go.R"
