import os

configfile: "config.yaml"

data_dir = '../rawData/batch/'
sample_fns = []
for file in os.listdir(data_dir):
    if file.endswith(".tsv"):
        sample_fns.append(file)
print(sample_fns)
sample_pfxes = list(map(lambda p: p[:p.rfind('.')], sample_fns))

rule all:
    resources: 
        tmpdir="/tmp"
    input:
        expand("cache/GO/fdr-{fdr}/{label}/block_summary.csv", 
               fdr = config["fdr"], 
               label=sample_pfxes)

rule graph:
    threads: 1
    resources: 
        tmpdir="/tmp"
    input:
        os.path.join(data_dir, '{label}.tsv')
    output:
        "cache/graph/{label}.xml.gz"
    script:
        "scripts/make_network.py"
 
rule trim:
    threads: 1
    resources: 
        tmpdir="/tmp"
    input:
        "cache/graph/{label}.xml.gz"
    output:
        "cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz" 
    params:
        fdr = config["fdr"],
        type = config["type"]
    log: 
        "logs/trim/fdr-{fdr}/{label}.log"
    script:
        "scripts/trim_networks.py"

rule minSBM:
    threads: 8
    resources: 
        tmpdir="/tmp"
    input:
        "cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz" 
    params:
        type = config["type"]
    output:
        "cache/initialBlock/fdr-{fdr}/{label}.dill" 
    log: 
        "logs/intialBlock/fdr-{fdr}/{label}.log"
    script:
        "scripts/make_SBM.py"

rule annealing: 
    threads: 8
    resources: 
        tmpdir="/tmp"
    params:
        type = config["type"]
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz",
        blocks="cache/initialBlock/fdr-{fdr}/{label}.dill"
    output:
        blocks="cache/annealedBlock/fdr-{fdr}/{label}.dill" 
    log: 
        "logs/annealedBlock/fdr-{fdr}/{label}.log"
    script:
        "scripts/annealing_SBM.py"

rule equilibrate:
    threads: 8
    resources: 
        tmpdir="/tmp"
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz",
        blocks="cache/annealedBlock/fdr-{fdr}/{label}.dill"
    output:
        blocks="cache/equilibrate/fdr-{fdr}/{label}.dill"
    params:
        type = config["type"],
        wait = 100
    log: 
        "logs/equilibrate/fdr-{fdr}/{label}.log"
    script:
        "scripts/equilibrateMCMC_SBM.py"

rule MCMC:
    threads: 16
    resources: 
        tmpdir="/tmp"
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz",
        blocks="cache/equilibrate/fdr-{fdr}/{label}.dill"
    output:
        blocks="cache/MCMC/blocks/fdr-{fdr}/{label}.dill",
        hist="cache/MCMC/hist/fdr-{fdr}/{label}.dill"
    params:
        type = config["type"],
        niter = 1000
    log: 
        "logs/MCMC/fdr-{fdr}/{label}.log"
    script:
        "scripts/MCMC_SBM.py"

rule exportBlocks:
    threads: 16
    resources: 
        tmpdir="/tmp"
    input:
        graph="cache/trimmed_graph/fdr-{fdr}/{label}.xml.gz",
        blocks="cache/MCMC/blocks/fdr-{fdr}/{label}.dill"
    output:
        blockSummary="cache/blockSummary/fdr-{fdr}/{label}/block_summary.csv",
        blockDF="cache/blockSummary/fdr-{fdr}/{label}/gene_block.csv"

    params:
        type = config["type"],
        blockDir = "cache/blockSummary/fdr-{fdr}/{label}"
    log: 
        "logs/exportBlocks/fdr-{fdr}/{label}.log"
    script:
        "scripts/exportBlocks.py"

rule GO:
    threads: 1
    resources: 
        tmpdir="/tmp"
    input:
        blockSummary="cache/blockSummary/fdr-{fdr}/{label}/block_summary.csv",
        blockDF="cache/blockSummary/fdr-{fdr}/{label}/gene_block.csv"
    output:
        GO="cache/GO/fdr-{fdr}/{label}/GO.rds",
        GOcsv="cache/GO/fdr-{fdr}/{label}/GO.csv",
        blockSummary="cache/GO/fdr-{fdr}/{label}/block_summary.csv"
    params:
        blockDir = "cache/blockSummary/fdr-{fdr}/{label}",
        orgdb = "org.Dm.eg.db"

    log: 
        log="logs/GO/fdr-{fdr}/{label}.log"
    script:
        "scripts/go.R"
